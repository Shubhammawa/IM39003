/* Optimization of non-linear function */
proc optmodel;
var x, y; /* declare variables */
/* objective function */
min z=x**2 - x - 2*y - x*y + y**2;
/* now run the solver */
solve;
print x y;
quit;



/* Optimization of constrained non-linear function */
proc optmodel;
var x, y;
number pi;
pi = constant("pi");
min z=4*cos(x/180*pi) + x + 2.5;
con constr1: 0<=x;
con constr2: 180>=x;
solve;
print x;
quit;

/* linear Programming */
proc optmodel;
var x1,x2,x3;

max z= -x1+x2+x3;

con constr1: x1+2*x2+2*x3>=0;
con constr2: 72-x1-2*x2-2*x3>=0;
con constr3: 0<=x1<=20;
con constr4: 0<=x2<=11;
con constr5: 0<=x3<=42;
solve;
print x1 x2 x3;
quit;

/* Alternate method for above problem */
proc optmodel;
 number ub{1..3} = [20 11 42];
 var x{i in 1..3} >= 0 <= ub[i] init 10;

 max f = -x[1] + x[2] + x[3];
 con c1: x[1] + 2*x[2] + 2*x[3] >= 0;
 con c2: 72 - x[1] -2*x[2] -2*x[3] >= 0;
 solve with lp;
 print x f;
quit;


proc optmodel;
 number ub{1..3} = [20 11 42];
 var x{i in 1..3} >= 0 <= ub[i] init 10;

 max f = -x[1] + x[2] + x[3];
 con c1: x[1] + 2*x[2] + 2*x[3] >= 0;
 con c2: 72 - x[1] -2*x[2] -2*x[3] >= 0;
 solve;
 print x f;
quit;

/* Transportation problem */
proc optmodel;
/* specify parameters */
set O={'Detroit','Pittsburgh'};
set D={'Boston','New York'};
number c{O,D}=[30 20
40 10];
number a{O}=[200 100];
number b{D}=[150 150];
/* model description */
var x{O,D} >= 0;
min total_cost = sum{i in O, j in D}c[i,j]*x[i,j];
constraint supply{i in O}: sum{j in D}x[i,j]=a[i];
constraint demand{j in D}: sum{i in O}x[i,j]=b[j];
/* solve and output */
solve;
print x;